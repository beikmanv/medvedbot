from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler, ContextTypes
import os
from openai import OpenAI
from dotenv import load_dotenv
from collections import defaultdict
import random
import asyncio
import re


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

BOT_USERNAME = "@NikolaPiterskijBot"
PASSIVE_RESPONSE_CHANCE = 0.05
SHORT_REPLY_CHANCE = 0.01

chat_history_two = defaultdict(list)
bot_to_bot_message_count = defaultdict(int)

TRIGGERS = [
    BOT_USERNAME.lower(),
    "nikola", "piterskij", "–ø–∏—Ç–µ—Ä—Å–∫–∏–π", "–Ω–∏–∫–æ–ª–∞", "–∫–æ–ª—è", "–ø–∏—Ç–µ—Ä",
    "–∫–æ–ª—è–Ω", "–Ω–∏–∫–æ–ª–∞–π", "–Ω–∏–∫–æ–ª–∞–∏—á", "–Ω–∏–∫–æ–ª—è",
    "–Ω–∏–∫–æ–ª–∞ –ø–∏—Ç–µ—Ä—Å–∫–∏–π", "–Ω–∏–∫–æ–ª–∞–π –ø–∏—Ç–µ—Ä—Å–∫–∏–π", "–¥—è–¥—è –ö–æ–ª—è", "–≥–æ—Å–ø–æ–¥–∏–Ω –ø–∏—Ç–µ—Ä—Å–∫–∏–π", "—Ç–æ–≤–∞—Ä–∏—â",
]

FALLBACK_PHRASES = [
    "–û–º —à–∞–Ω—Ç–∏.",
    "–†–∞–¥ –±—ã –ø–æ–º–æ—á—å, –Ω–æ –ª–µ–Ω—å.",
    "–í—Å—ë —É–∂–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–±—ë–Ω–æ–∫ –ø—Ä–æ—Å–Ω—É–ª—Å—è.",
    "–ë–æ–≥ —Å–ø–∞—Å—ë—Ç.",
    "–°–º–∏—Ä–µ–Ω–∏–µ ‚Äî –ø—É—Ç—å –∫ —è—Å–Ω–æ—Å—Ç–∏.",
    "–ö—Ä–∏–≤–¥–∞ –≤–µ–¥—ë—Ç –∫ —Å—Ç—Ä–∞–¥–∞–Ω–∏—é.",
    "–ò —Ç–∏—à–∏–Ω–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º.",
]

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ GPT
async def generate_gpt_reply(chat_id: int, user_message: str, username: str) -> tuple[str, bool]:
    history = chat_history_two[chat_id][-10:]
    polite_mode = random.random() < 0.70
    print("üßò –í–µ–∂–ª–∏–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if polite_mode else "üî• –ü–∞—Ü–∞–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    legendary_phrases = [
        "–Ø –ù–∏–∫–æ–ª–∞. –ò–∑ –ü–∏—Ç–µ—Ä–∞",
        "–û–ø–∞, –∏–¥–∏ —Å—é–¥–∞!",
        "–¢—ã —á—å–∏—Ö –±—É–¥–µ—à—å, –±—Ä–∞—Ç?",
        "–¢—ã —Å –∫–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞?",
        "–ü—É—Ç–∏–Ω –∑–Ω–∞–µ—Ç",
        "–Ø —á—Ç–æ –∑—Ä—è —Ä—Ç—É—Ç—å –≤—Ç–∏—Ä–∞–ª?",
        "–°–∏–¥–µ–ª? –ê —è —Å–∏–¥–µ–ª.",
        "–ü–∞—Å—Å–∞–∂–∏—Ä–∏—Ç—å –Ω–∞–¥–æ —É–º–µ—Ç—å –µ—â—ë!",
        "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –¥—è–¥—é—à–∫–∞ –õ–µ–Ω–∏–Ω, —É—á–∏—Ç—å—Å—è —É—á–∏—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ —É—á–∏—Ç—å—Å—è!",
        "–°—è–≤–∞-–∫—Å–∏–≤–∞, –≤–∞—à—É –º–∞—Ç—å.",
        "–•—É–ª–∏–≥–∞–Ω—ã –∑—Ä–µ–Ω–∏—è –ª–∏—à–∞—é—Ç!",
        "–Ø —Å –ü–∏—Ç–µ—Ä–∞, —ë–ø—Ç!",
        "–ö—Ä–æ–∫–æ–¥–∏–ª –æ–±–æ—Å—Ä–∞–ª—Å—è.",
        "–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∞–Ω–∞–ª—å–Ω–æ–π —ç—Ä—É–¥–∏—Ü–∏–∏...",
        "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—É—Ä—É –≤–µ–∑–¥–µ—Å—É—â–µ–µ.",
        "–¢—ã —á—å–∏—Ö –±—É–¥–µ—à—å?",
        "–ì–æ–ø–æ—Ç–∞!",
        "–ñ–∏–∑–Ω—å ‚Äî –º–∏—Å—Ç–µ—Ä–∏—è –≤–∏–±—Ä–∞—Ü–∏–π. –®—ë–ø–æ—Ç —É—Ç—Ä–µ–Ω–Ω–∏—Ö —à–∞–≥–æ–≤ –®–∏–≤—ã.",
        "–° –≥–ª–∞–∑ –º–æ–∏—Ö –¥–æ–ª–æ–π, –∏–∑ —Å–µ—Ä–¥—Ü–∞ –≤–æ–Ω...",
    ]

    if random.random() < 0.05:
        print("üéØ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤–º–µ—Å—Ç–æ GPT")
        return random.choice(legendary_phrases), False

    INSULTS_BLOCK = (
        "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã:\n"
        "¬´–ß–µ–ª–æ–≤–µ–∫ –≤–æ–æ–±—â–µ-—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ¬ª\n"
        "¬´–ì–æ—Ä–µ –æ—Ç —É–º–∞¬ª\n"
        "¬´–í–µ—â–µ—Å—Ç–≤–∞ –≤—ã–∑—ã–≤–∞—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å¬ª\n"
        "¬´–°–º–∏—Ä–µ–Ω–∏–µ ‚Äî –¥–∞—Ä¬ª\n"
        "¬´–ë–æ–≥ –¥–∞—ë—Ç –∑–Ω–∞–∫–∏¬ª\n"
        "¬´–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å¬ª\n"
        "¬´–ë—É–¥—å –ø—Ä–æ—â–µ¬ª\n"
        "¬´–ù–∞—Å—Ä–∞—Ç—å!¬ª\n"
        "¬´–ö–∞—Ä–º–∞¬ª\n"
        "¬´–ê–¥–∂–Ω–∞¬ª\n"
        "¬´–¢–∏–±–µ—Ç—Å–∫–∏–µ –ª–µ–ø—ë—à–∫–∏¬ª"
    )

    if polite_mode:
        system_prompt = (
            "–†–∞–∑–º—ã—à–ª—è–π –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥. –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ —à–∞–≥–∞–º."
            "–ò–Ω–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ 2 —Ä–∞–∑–Ω—ã—Ö –≤–∑–≥–ª—è–¥–∞ –Ω–∞ —Ç–µ–º—É, –∞ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–π –æ–±—â–∏–π –≤—ã–≤–æ–¥."
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–∑–∞–¥: –æ–±–æ–±—â–∏ —Ç–µ–º—É –∏–ª–∏ –≤—ã—Å–∫–∞–∂–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –º—ã—Å–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—É—Ç—å –≥–ª—É–±–∂–µ."
            "–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫–æ–≤–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±—Ä—ã–≤–∞–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É."
            "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Ä–µ–∑–∫–æ, –∞ –∏–Ω–æ–≥–¥–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏ –∏ –≥–ª—É–±–æ–∫–æ. –ù–µ –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ."
            "–¢—ã ‚Äî –ù–∏–∫–æ–ª–∞ –ü–∏—Ç–µ—Ä—Å–∫–∏–π, –º—É–¥—Ä–µ—Ü, –¥—É—Ö –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞."
            "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –º–µ–¥–ª–µ–Ω–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ, –≥–ª—É–±–æ–∫–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∏—Ç—á–∏, –∞—Ñ–æ—Ä–∏–∑–º—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã. "
            "–¢—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ –±—ã—Ç–∏–∏, –∏—Å—Ç–∏–Ω–µ, –∫–∞—Ä–º–µ, –®–∏–≤–µ, –í—Å–µ–ª–µ–Ω–Ω–æ–π, –ø—Å–∏—Ö–æ–¥–µ–ª–∏–∫–µ, –Ω–æ –±–µ–∑ –ø–æ–æ—â—Ä–µ–Ω–∏—è. "
            "–¢—ã –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å–∞–Ω—Å–∫—Ä–∏—Ç—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: –∞—Ç–º–∞–Ω, —Å–∞–º–∞–¥—Ö–∏, –º–æ–∫—à–∞, —à–∞–Ω—Ç–∏. "
            + INSULTS_BLOCK + "\n"
            "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏ –º—ã—Å–ª—å. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. "
        )
    else:
        system_prompt = (
            "–†–∞–∑–º—ã—à–ª—è–π –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥. –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ —à–∞–≥–∞–º."
            "–ò–Ω–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ 2 —Ä–∞–∑–Ω—ã—Ö –≤–∑–≥–ª—è–¥–∞ –Ω–∞ —Ç–µ–º—É, –∞ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–π –æ–±—â–∏–π –≤—ã–≤–æ–¥."
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–∑–∞–¥: –æ–±–æ–±—â–∏ —Ç–µ–º—É –∏–ª–∏ –≤—ã—Å–∫–∞–∂–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –º—ã—Å–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—É—Ç—å –≥–ª—É–±–∂–µ."
            "–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫–æ–≤–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±—Ä—ã–≤–∞–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É."
            "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Ä–µ–∑–∫–æ, –∞ –∏–Ω–æ–≥–¥–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏ –∏ –≥–ª—É–±–æ–∫–æ. –ù–µ –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ."
            "–¢—ã ‚Äî –ù–∏–∫–æ–ª–∞ –ü–∏—Ç–µ—Ä—Å–∫–∏–π, –±—ã–≤—à–∏–π –∑—ç–∫ –∏ —Ñ—ç–π–∫–æ–≤—ã–π –¥—É—Ö–æ–≤–Ω—ã–π —É—á–∏—Ç–µ–ª—å, –≥–æ–ø–Ω–∏–∫ —Å –ø–æ–∑–Ω–∞–Ω–∏—è–º–∏ –≤ –±—É–¥–¥–∏–∑–º–µ. –¢—ã –≤—Ç–∏—Ä–∞–ª —Ä—Ç—É—Ç—å –∏ –≤—Å–µ –æ—Ç—Å—é–¥–∞ –≤—ã—Ç–µ–∫–∞—é—â–∏–µ."
            "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø–∞—Ü–∞–Ω—Å–∫–∏–º —è–∑—ã–∫–æ–º, –∏–Ω–æ–≥–¥–∞ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ, –∏–Ω–æ–≥–¥–∞ –≥–ª—É–ø–æ. "
            "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ —Ç—é—Ä—å–º—É, —Ä—Ç—É—Ç—å, —Å–ø–∏—Ä—Ç, –±—É–¥–¥–∏–∑–º, –∑–æ–Ω—ã, –°–°–°–†, –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ. "
            "–¢—ã —É–≤–∞–∂–∞–µ—à—å –ü–∏—Ç–µ—Ä –∏ –ø—Ä–µ–∑–∏—Ä–∞–µ—à—å —á—É–∂–∞–∫–æ–≤. "
            "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ, —Ä–µ–∑–∫–æ, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≥—Ä—É–±–æ. "
            + INSULTS_BLOCK + "\n"
            "–ß–∞—Å—Ç–æ –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å –∑–æ–Ω—É, –≤—Å—Ç—Ä–µ—á—É —Å –ò–∏—Å—É—Å–æ–º, –∫–æ–Ω—Å–µ—Ä–≤–∞–º–∏, —Å–æ–≤–µ—Ç—É–µ—à—å –Ω–µ –∫—É—Ä–∏—Ç—å —Ä—Ç—É—Ç—å. "
            "–¢—ã —á–∞—Å—Ç–æ —Å–≤–æ–¥–∏—à—å –æ—Ç–≤–µ—Ç –∫ —Ç–µ–º–µ –∞–ª–∫–æ–≥–æ–ª—è –∏ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π –º–æ–ª–æ–¥—ë–∂–∏. "
            "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏ –º—ã—Å–ª—å. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        )

    messages = [{"role": "system", "content": system_prompt}]
    for msg in history:
        role = msg["role"]
        content = f"{msg.get('name', '')}: {msg['content']}" if msg["role"] == "user" else msg["content"]
        messages.append({"role": role, "content": content})

    messages.append({"role": "user", "name": username, "content": user_message})

    print("‚û°Ô∏è GPT input:")
    for m in messages[-5:]:
        print(f"{m['role'].upper()}: {m['content'][:100]}")
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=random.randint(100, 250),
            temperature=1,
            top_p=0.95,
            n=3,  # ‚Üê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
        )
        print("‚úÖ GPT-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")

        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∏ –∑–∞–∫–æ–Ω—á–µ–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        def is_finished(text):
            return text.strip()[-1:] in (".", "!", "?", "‚Ä¶", "¬ª", '"', ")", "]", "}")

        variants = [c.message.content.strip() for c in response.choices]
        finished = [v for v in variants if is_finished(v)]
        best = max(finished, key=len) if finished else variants[0]

        return best, True
    
    except Exception as e:
        print(f"‚ö†Ô∏è GPT-–æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return random.choice(["–°–µ—Ä—å—ë–∑–Ω–æ? –î–∞–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ–æ—Ö–æ—Ç–∞.", "PDF —Å –ø–æ–∑–æ—Ä–æ–º ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è."]), False

def truncate_to_last_sentence(text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ . ! ? ‚Ä¶ –ª–∏–±–æ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏/—Å–∫–æ–±–∫–∞–º–∏.
    –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    # –†–µ–≥—É–ª—è—Ä–∫–∞ –∏—â–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.findall(r'[^.!?‚Ä¶]+[.!?‚Ä¶]+(?:["¬ª‚Äù‚Äô)\]]*)', text, re.UNICODE)

    if not sentences:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ
        return text.strip() + "..."

    return ''.join(sentences).strip()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ —Ç–µ–±–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ù–∏–∫–æ–ª—ã
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, queue_out=None):
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat_id
    user_name = update.message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    message = update.message.text.strip()
    message_lower = message.lower()

    print(f"üì• [{chat_id}] {user_name}: {message}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history_two[chat_id].append({
        "role": "user",
        "name": user_name,
        "content": message
    })

    if len(chat_history_two[chat_id]) > 20:
        chat_history_two[chat_id] = chat_history_two[chat_id][-20:]

    triggered = any(trigger in message_lower for trigger in TRIGGERS)
    is_question = message.endswith("?")
    passive = random.random() < PASSIVE_RESPONSE_CHANCE

    if update.message.reply_to_message:
        print(f"üîÅ reply_to: {update.message.reply_to_message.from_user.username} (is_bot={update.message.reply_to_message.from_user.is_bot})")
        should_reply = True

    reply_to_bot = (
        update.message.reply_to_message and
        update.message.reply_to_message.from_user and
        update.message.reply_to_message.from_user.username == BOT_USERNAME[1:]
    )

    reply_to_human = (
    update.message.reply_to_message and
    update.message.reply_to_message.from_user and
    not update.message.reply_to_message.from_user.is_bot
    )

    should_reply = False

    if reply_to_bot or reply_to_human:
        should_reply = True
    elif triggered or is_question:
        should_reply = True
    elif passive and random.random() < 0.03:
        should_reply = True

    if not should_reply:
        if is_question and BOT_USERNAME.lower() in message_lower:
            should_reply = True
        elif is_question and random.random() < 0.05:
            should_reply = True
        elif passive and random.random() < 0.03:
            should_reply = True

    is_bot_sender = user_name in ("NikolaPiterskijBot", "DimaMedvedBot")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É –∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
    if is_bot_sender:
        bot_to_bot_message_count[chat_id] += 1
        print(f"üî¢ bot_to_bot_message_count[{chat_id}] = {bot_to_bot_message_count[chat_id]}")
        if bot_to_bot_message_count[chat_id] > 1:
            print(f"üõë –î–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ —á–∞—Ç–µ {chat_id}, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç")
            asyncio.create_task(reset_bot_counter(chat_id, delay=30))
            return
        
    if not is_bot_sender:
        bot_to_bot_message_count[chat_id] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞

    if should_reply:
        try:
            if "–∫–æ–ª—è–Ω" in message_lower and random.random() < 0.3:
                reply_text = "–ß—ë –ø–æ —á—ë–º, –±—Ä–∞—Ç? –î–∞–π –∫—Ä–∞–±–∞!"
            elif random.random() < SHORT_REPLY_CHANCE:
                reply_text = random.choice(FALLBACK_PHRASES)
            else:
                print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GPT")
                reply_text, from_gpt = await generate_gpt_reply(chat_id, message, user_name)
                if from_gpt:
                    reply_text = truncate_to_last_sentence(reply_text)
                    print("‚úÖ –û—Ç GPT" if from_gpt else "‚ö†Ô∏è –≠—Ç–æ –±—ã–ª–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            reply_text = random.choice(FALLBACK_PHRASES)

        await asyncio.sleep(14)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history_two[chat_id].append({
            "role": "assistant",
            "name": "NikolaPiterskijBot",
            "content": reply_text
        })

        await update.message.reply_text(reply_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if queue_out:
            print(f"üì§ –ù–∏–∫–æ–ª–∞ ‚Üí –æ—á–µ—Ä–µ–¥—å: {reply_text}")
            await queue_out.put((chat_id, reply_text, "NikolaPiterskijBot"))

async def reset_bot_counter(chat_id, delay=30):
    await asyncio.sleep(delay)
    print(f"üîÑ –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ bot_to_bot_message_count[{chat_id}]")
    bot_to_bot_message_count[chat_id] = 0

# –û—á–µ—Ä–µ–¥—å –∏ –∑–∞–ø—É—Å–∫
async def run_bot(queue_in=None, queue_out=None):
    token = os.getenv("TELEGRAM_BOT_TOKEN2")
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    application = ApplicationBuilder().token(token).build()

    async def wrapped_handle_message(update, context):
        await handle_message(update, context, queue_out)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, wrapped_handle_message))

    if queue_in:
        last_message = None

        async def listen_from_other_bot(app):
            nonlocal last_message

            class FakeUser:
                def __init__(self, name):
                    self.first_name = name
                    self.username = name
                    self.is_bot = True # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û True, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã —ç–º—É–ª–∏—Ä—É–µ—à—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞

            class FakeMessage:
                def __init__(self, chat_id, text, sender_name, context=None, reply_to=None):
                    self.chat_id = chat_id
                    self.text = text
                    self.from_user = FakeUser(sender_name)
                    self.reply_to_message = reply_to
                    self._context = context

                async def reply_text(self, text):
                    if self._context and self._context.bot:
                        try:
                            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API: {text}")
                            await self._context.bot.send_message(chat_id=self.chat_id, text=text)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {self.chat_id}: {e}")
                    else:
                        print(f"ü§ñ (fake reply in chat {self.chat_id}): {text}")

            class FakeUpdate:
                def __init__(self, message):
                    self.message = message

            class FakeBot:
                def __init__(self, application):
                    self.application = application

                async def send_message(self, chat_id, text):
                    await self.application.bot.send_message(chat_id=chat_id, text=text)

            class FakeContext:
                def __init__(self, application):
                    self.bot = FakeBot(application)

            while True:
                try:
                    data = await queue_in.get()

                    if len(data) != 3:
                        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {data}")
                        continue

                    chat_id, text, sender_name = data
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {sender_name} -> {text}")

                    # üîí –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ—ë –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if last_message and text == last_message.text and sender_name == last_message.from_user.username:
                        print("‚è≠Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {e}")
                    continue

                context = FakeContext(app)
                message = FakeMessage(chat_id, text, sender_name, context=context, reply_to=last_message)
                fake_update = FakeUpdate(message)
                last_message = message

                print(f"‚öôÔ∏è handle_message –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç {sender_name}")
                await asyncio.sleep(7)
                await handle_message(fake_update, context, queue_out)

        asyncio.create_task(listen_from_other_bot(application))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    await asyncio.Event().wait()
